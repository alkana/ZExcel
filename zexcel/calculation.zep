namespace ZExcel;

class Calculation
{
	//    Numeric operand
    const CALCULATION_REGEXP_NUMBER = "[-+]?\d*\.?\d+(e[-+]?\d+)?";
    
    //    String operand
    const CALCULATION_REGEXP_STRING = '"(?:[^"]|"")*"';
    
    //    Opening bracket
    const CALCULATION_REGEXP_OPENBRACE = "\(";
    
    //    Function (allow for the old @ symbol that could be used to prefix a function, but we'll ignore it)
    const CALCULATION_REGEXP_FUNCTION = "@?([A-Z][A-Z0-9\.]*)[\s]*\(";
    
    //    Cell reference (cell or range of cells, with or without a sheet reference)
    // const CALCULATION_REGEXP_CELLREF = CALCULATION_REGEXP_CELLREF;
    
    //    Named Range of cells
    // const CALCULATION_REGEXP_NAMEDRANGE = CALCULATION_REGEXP_NAMEDRANGE;
    
    //    Error
    const CALCULATION_REGEXP_ERROR = "\#[A-Z][A-Z0_\/]*[!\?]?";


    /** constants */
    const RETURN_ARRAY_AS_ERROR = "error";
    const RETURN_ARRAY_AS_VALUE = "value";
    const RETURN_ARRAY_AS_ARRAY = "array";

    private static returnArrayAsType = self::RETURN_ARRAY_AS_VALUE;


    /**
     * Instance of this class
     *
     * @access    private
     * @var PHPExcel_Calculation
     */
    private static _instance;


    /**
     * Instance of the workbook this Calculation Engine is using
     *
     * @access    private
     * @var PHPExcel
     */
    private _workbook;

	private delta = null;
	
	private _debugLog = null;

    /**
     * List of instances of the calculation engine that we've instantiated for individual workbooks
     *
     * @access    private
     * @var PHPExcel_Calculation[]
     */
    private static _workbookSets;

    /**
     * Calculation cache
     *
     * @access    private
     * @var array
     */
    private _calculationCache = [];


    /**
     * Calculation cache enabled
     *
     * @access    private
     * @var boolean
     */
    private _calculationCacheEnabled = true;
    
    /**
     * The debug log generated by the calculation engine
     *
     * @access    private
     * @var PHPExcel_CalcEngine_Logger
     *
     */
    private debugLog;

    /**
     * Flag to determine how formula errors should be handled
     *        If true, then a user error will be triggered
     *        If false, then an exception will be thrown
     *
     * @access    public
     * @var boolean
     *
     */
    public suppressFormulaErrors = FALSE;

    /**
     * Error message for any error that was raised/thrown by the calculation engine
     *
     * @access    public
     * @var string
     *
     */
    public formulaError = NULL;

    /**
     * An array of the nested cell references accessed by the calculation engine, used for the debug log
     *
     * @access    private
     * @var array of string
     *
     */
    private _cyclicReferenceStack;

    private _cellStack = [];

    /**
     * Current iteration counter for cyclic formulae
     * If the value is 0 (or less) then cyclic formulae will throw an exception,
     *    otherwise they will iterate to the limit defined here before returning a result
     *
     * @var integer
     *
     */
    private _cyclicFormulaCount = 1;

    private _cyclicFormulaCell = "";

    /**
     * Number of iterations for cyclic formulae
     *
     * @var integer
     *
     */
    public cyclicFormulaCount = 1;

    /**
     * Precision used for calculations
     *
     * @var integer
     *
     */
    private _savedPrecision = 14;


    /**
     * The current locale setting
     *
     * @var string
     *
     */
    private static _localeLanguage = "en_us";                    //    US English    (default locale)
	
	private function __construct(<\ZExcel\ZExcel> workbook = null)
	{
		int setPrecision = 16;
		
		if (PHP_INT_SIZE == 4) {
			let setPrecision = 14;
		}
		
        let this->_savedPrecision = ini_get("precision");
        
        if (this->_savedPrecision < setPrecision) {
            ini_set("precision", setPrecision);
        }
        
        let this->delta = 1 * pow(10, -setPrecision);
        
        if (workbook !== null) {
            let self::_workbookSets[workbook->getID()] = this;
        }
        let this->_workbook = workbook;
        let this->_cyclicReferenceStack = new \ZExcel\CalcEngine\CyclicReferenceStack();
        let this->_debugLog = new \ZExcel\CalcEngine\Logger(this->_cyclicReferenceStack);
    }
    
	
    public function __destruct()
	{
        if (this->_savedPrecision != ini_get("precision")) {
            ini_set("precision", this->_savedPrecision);
        }
    }
    
    /**
     * Get an instance of this class
     *
     * @access  public
     * @param   PHPExcel workbook  Injected workbook for working with a PHPExcel object,
     *                                    or NULL to create a standalone claculation engine
     * @return PHPExcel_Calculation
     */
    public static function getInstance(<\ZExcel\ZExcel> workbook = NULL) -> <\ZExcel\Calculation>
    {
        if (workbook !== null) {
            if (isset(self::_workbookSets[workbook->getID()])) {
                return self::_workbookSets[workbook->getID()];
            }
            return new \ZExcel\Calculation(workbook);
        }
        
        if (!isset(self::_instance) || (self::_instance === null)) {
            let self::_instance = new \ZExcel\Calculation();
        }
        
        return self::_instance;
    }
    
    /**
     * Unset an instance of this class
     *
     * @access    public
     * @param   PHPExcel workbook  Injected workbook identifying the instance to unset
     */
    public static function unsetInstance(<\ZExcel\ZExcel> workbook = null) {
        if (workbook !== null) {
            if (isset(self::_workbookSets[workbook->getID()])) {
                unset(self::_workbookSets[workbook->getID()]);
            }
        }
    }
}
